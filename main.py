import asyncio
import logging
import json
import string
from datetime import datetime, timedelta
import os
import pytz
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

# === Load environment variables === #
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PORT = int(os.getenv("PORT", 3000))
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
BASE_WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")

# === Init bot and dispatcher === #
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# === Time zone === #
moscow_tz = pytz.timezone("Europe/Moscow")

# === Puzzle file === #
PUZZLE_FILE = "puzzles.json"

# === State Machine for Adding Puzzle === #
class PuzzleForm(StatesGroup):
    waiting_for_date = State()
    waiting_for_question = State()
    waiting_for_answer = State()
    waiting_for_hint = State()
    waiting_for_friday = State()

# === Utilities === #
def load_puzzles():
    if not os.path.exists(PUZZLE_FILE):
        return []
    with open(PUZZLE_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_puzzles(puzzles):
    with open(PUZZLE_FILE, "w", encoding="utf-8") as f:
        json.dump(puzzles, f, ensure_ascii=False, indent=2)

def normalize_answer(text):
    text = text.lower().translate(str.maketrans('', '', string.punctuation)).strip()
    return "".join(text.split())

def get_today_puzzle():
    today = datetime.now(moscow_tz).strftime("%Y-%m-%d")
    puzzles = load_puzzles()
    for p in puzzles:
        if p['date'] == today:
            return p
    return None

user_coins = {}
user_answers = {}

# === Keyboards === #
def main_keyboard():
    kb = [[
        InlineKeyboardButton(text="üí∞ –ú–æ–∏ –ù–ò–¢–ò–∫–æ–∏–Ω—ã", callback_data="my_coins"),
        InlineKeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")
    ], [
        InlineKeyboardButton(text="üß† –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint"),
        InlineKeyboardButton(text="üòè –ü–æ—à–ª–∞—è –ø—è—Ç–Ω–∏—Ü–∞", callback_data="friday")
    ]]
    if ADMIN_ID:
        kb.append([InlineKeyboardButton(text="üé© –ö–æ–º–∞–Ω–¥—ã", callback_data="admin")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# === Scheduler Tasks === #
async def send_daily_puzzle():
    puzzle = get_today_puzzle()
    if puzzle:
        text = f"üß© <b>–ó–∞–≥–∞–¥–∫–∞ –¥–Ω—è ({puzzle['date']})</b>\n{puzzle['question']}"
        await bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=main_keyboard())

async def send_reminder():
    await bot.send_message(chat_id=ADMIN_ID, text="‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –≤—ã–π–¥–µ—Ç –Ω–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞!")

async def scheduler():
    while True:
        now = datetime.now(moscow_tz)
        if now.strftime("%H:%M") == "08:50":
            await send_reminder()
        elif now.strftime("%H:%M") == "09:00":
            await send_daily_puzzle()
        await asyncio.sleep(60)

# === Command Handlers === #
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuizMCBot!", reply_markup=main_keyboard())

@router.callback_query(F.data == "my_coins")
async def show_coins(callback: CallbackQuery):
    coins = user_coins.get(callback.from_user.id, 0)
    await callback.message.answer(f"üí∞ –£ —Ç–µ–±—è {coins} –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤!")

@router.callback_query(F.data == "rating")
async def show_rating(callback: CallbackQuery):
    top = sorted(user_coins.items(), key=lambda x: x[1], reverse=True)[:10]
    text = "üìä <b>–¢–û–ü-10</b>\n"
    for i, (uid, score) in enumerate(top, 1):
        text += f"{i}. <a href='tg://user?id={uid}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> ‚Äî {score} ü™ô\n"
    await callback.message.answer(text)

@router.callback_query(F.data == "hint")
async def show_hint(callback: CallbackQuery):
    puzzle = get_today_puzzle()
    if not puzzle:
        await callback.message.answer("–°–µ–≥–æ–¥–Ω—è –∑–∞–≥–∞–¥–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return
    await callback.message.answer(f"üß† –ü–æ–¥—Å–∫–∞–∑–∫–∞: {puzzle['hints'][0]}")

@router.callback_query(F.data == "friday")
async def show_friday(callback: CallbackQuery):
    puzzle = get_today_puzzle()
    if puzzle and puzzle.get("is_friday"):
        await callback.message.answer("üòè –°–µ–≥–æ–¥–Ω—è –ü–æ—à–ª–∞—è –ø—è—Ç–Ω–∏—Ü–∞! –ë–æ–Ω—É—Å +3 –ù–ò–¢–ò–∫–æ–∏–Ω–∞!")
    else:
        await callback.message.answer("–°–µ–≥–æ–¥–Ω—è –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å üôÉ")

@router.callback_query(F.data == "admin")
async def admin_panel(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    text = "üé© –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n/addpuzzle ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–∞–¥–∫—É\n/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    await callback.message.answer(text)

# === Answer Handler === #
@router.message()
async def handle_answer(message: Message):
    puzzle = get_today_puzzle()
    if not puzzle:
        return
    if message.from_user.id in user_answers.get(puzzle['date'], []):
        return await message.answer("‚õî –¢—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª —Å–µ–≥–æ–¥–Ω—è!")
    if normalize_answer(message.text) == normalize_answer(puzzle['answer']):
        pos = len(user_answers.setdefault(puzzle['date'], [])) + 1
        reward = max(11 - pos, 1) + (3 if puzzle.get("is_friday") else 0)
        user_coins[message.from_user.id] = user_coins.get(message.from_user.id, 0) + reward
        user_answers[puzzle['date']].append(message.from_user.id)
        await message.answer(f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å {reward} –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤!")
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# === Admin: Add Puzzle === #
@router.message(F.text == "/addpuzzle")
async def start_add_puzzle(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("üóì –í–≤–µ–¥–∏ –¥–∞—Ç—É –∑–∞–≥–∞–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
    await state.set_state(PuzzleForm.waiting_for_date)

@router.message(PuzzleForm.waiting_for_date)
async def puzzle_date_entered(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("üß† –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∫–∏")
    await state.set_state(PuzzleForm.waiting_for_question)

@router.message(PuzzleForm.waiting_for_question)
async def puzzle_question_entered(message: Message, state: FSMContext):
    await state.update_data(question=message.text)
    await message.answer("‚úÖ –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
    await state.set_state(PuzzleForm.waiting_for_answer)

@router.message(PuzzleForm.waiting_for_answer)
async def puzzle_answer_entered(message: Message, state: FSMContext):
    await state.update_data(answer=message.text)
    await message.answer("üí° –í–≤–µ–¥–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É")
    await state.set_state(PuzzleForm.waiting_for_hint)

@router.message(PuzzleForm.waiting_for_hint)
async def puzzle_hint_entered(message: Message, state: FSMContext):
    await state.update_data(hint=message.text)
    await message.answer("–°–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞ –∏ –∑–∞–≥–∞–¥–∫–∞ –ø–æ—à–ª–∞—è? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(PuzzleForm.waiting_for_friday)

@router.message(PuzzleForm.waiting_for_friday)
async def puzzle_friday_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    puzzles = load_puzzles()
    puzzles.append({
        "date": data['date'],
        "question": data['question'],
        "answer": data['answer'],
        "hints": [data['hint']],
        "is_friday": message.text.lower() == "–¥–∞"
    })
    save_puzzles(puzzles)
    await message.answer("‚úÖ –ó–∞–≥–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

# === Admin Restart === #
@router.message(F.text == "/restart")
async def restart_bot(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫... (—É—Å–ª–æ–≤–Ω—ã–π)")

# === Launch === #
async def on_startup(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="addpuzzle", description="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–∞–¥–∫—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        BotCommand(command="restart", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
    ], scope=BotCommandScopeDefault())

app = web.Application()
app['bot'] = bot
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.set_webhook(f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}")
    asyncio.create_task(scheduler())
    return app

if __name__ == '__main__':
    web.run_app(main(), port=PORT)

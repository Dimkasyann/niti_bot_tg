# ‚úÖ src/config.py

import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# ‚úÖ src/middlewares.py

def setup_middlewares(dp):
    pass  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ, –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# ‚úÖ src/keyboard.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from src.config import ADMIN_ID

def main_menu_keyboard(user_id):
    buttons = [
        [InlineKeyboardButton(text="üß† –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
        [InlineKeyboardButton(text="üí∞ –ú–æ–∏ –ù–ò–¢–ò–∫–æ–∏–Ω—ã", callback_data="coins")],
        [InlineKeyboardButton(text="üß© –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="hint")],
        [InlineKeyboardButton(text="üçë –ü–æ—à–ª–∞—è –ø—è—Ç–Ω–∏—Ü–∞", callback_data="friday")],
    ]
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã", callback_data="admin_commands")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ‚úÖ src/state.py

from aiogram.fsm.state import State, StatesGroup

class AddPuzzle(StatesGroup):
    waiting_for_date = State()
    waiting_for_question = State()
    waiting_for_answer = State()
    waiting_for_hint = State()

# ‚úÖ src/utils.py

import json
from datetime import datetime, timedelta
from aiogram import Bot
from aiogram.types import Message

from src.keyboard import main_menu_keyboard
from src.config import ADMIN_ID

PUZZLE_FILE = "puzzles.json"

async def send_daily_puzzle(bot: Bot, reminder=False):
    today = datetime.now().strftime("%Y-%m-%d")
    with open(PUZZLE_FILE, "r", encoding="utf-8") as f:
        puzzles = json.load(f)

    for p in puzzles:
        if p["date"] == today:
            question = p["question"]
            hint = p.get("hint", "–ü–æ–¥—É–º–∞–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ!")
            break
    else:
        return

    users_file = "users.json"
    try:
        with open(users_file, "r", encoding="utf-8") as f:
            users = json.load(f)
    except FileNotFoundError:
        users = []

    for uid in users:
        try:
            if reminder:
                await bot.send_message(uid, "‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø—Ä–∏–ª–µ—Ç–∏—Ç –Ω–æ–≤–∞—è –∑–∞–≥–∞–¥–∫–∞! –ü–æ–¥–≥–æ—Ç–æ–≤—å –º–æ–∑–≥–∏ üß†")
            else:
                await bot.send_message(uid, f"üß© –ó–∞–≥–∞–¥–∫–∞ –¥–Ω—è!\n\n<b>{question}</b>", reply_markup=main_menu_keyboard(uid))
        except:
            continue

async def clean_text(text):
    return ''.join(e for e in text.lower().strip() if e.isalnum())

async def get_puzzle_for_today():
    today = datetime.now().strftime("%Y-%m-%d")
    with open(PUZZLE_FILE, "r", encoding="utf-8") as f:
        puzzles = json.load(f)
    for p in puzzles:
        if p["date"] == today:
            return p
    return None

# ‚úÖ src/handlers.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from datetime import datetime, timedelta
import json
import asyncio

from src.keyboard import main_menu_keyboard
from src.utils import clean_text, get_puzzle_for_today
from src.config import ADMIN_ID

router = Router()

user_data = {}
user_coins = {}
hints_shown = {}
answered_users = set()

USERS_FILE = "users.json"

def setup_handlers(dp, bot):
    dp.include_router(router)

@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.full_name

    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    except FileNotFoundError:
        users = []

    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f)

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üëã\n\n–ú—ã ‚Äî –ú–æ–ª–æ–¥—ë–∂–Ω—ã–π —Å–æ–≤–µ—Ç –ù–ò–¢–ò –∏ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 —Ç–µ–±—è –∂–¥—ë—Ç —Å–≤–µ–∂–∞—è –∑–∞–≥–∞–¥–∫–∞. –ó–∞–≥–∞–¥–∞–π –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ ‚Äî –∑–∞—Ä–∞–±–æ—Ç–∞–π –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤ üí∞ –∏ –ø–æ–ø–∞–¥–∏ –≤ –¢–û–ü!",
        reply_markup=main_menu_keyboard(user_id)
    )

    # –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–≥–∞–¥–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    puzzle = await get_puzzle_for_today()
    if puzzle:
        await message.answer(f"üß© –ó–∞–≥–∞–¥–∫–∞ –¥–Ω—è!\n\n<b>{puzzle['question']}</b>")
    else:
        await message.answer("ü´§ –°–µ–≥–æ–¥–Ω—è –∑–∞–≥–∞–¥–∫–∏ –Ω–µ—Ç. –ù–æ —Ç—ã –Ω–µ —É–Ω—ã–≤–∞–π ‚Äî –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!")

@router.callback_query(F.data == "coins")
async def show_coins(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    coins = user_coins.get(user_id, 0)
    await callback.message.edit_text(f"üí∞ –£ —Ç–µ–±—è {coins} –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤!")

@router.callback_query(F.data == "hint")
async def show_hint(callback: CallbackQuery):
    user_id = callback.from_user.id
    now = datetime.now()
    if user_id not in hints_shown:
        hints_shown[user_id] = now
        await callback.message.answer("üïí –ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç! –ü–æ–¥–æ–∂–¥–∏ –∏ –ø–æ–¥—É–º–∞–π –µ—â—ë!")
    elif now - hints_shown[user_id] >= timedelta(minutes=30):
        puzzle = await get_puzzle_for_today()
        await callback.message.answer(f"üîç –ü–æ–¥—Å–∫–∞–∑–∫–∞: {puzzle['hint']}")
    else:
        remaining = 30 - int((now - hints_shown[user_id]).seconds / 60)
        await callback.message.answer(f"‚è≥ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω. –ü–æ—Ç–µ—Ä–ø–∏!")

@router.message()
async def handle_answer(message: Message):
    user_id = str(message.from_user.id)
    if user_id in answered_users:
        await message.answer("üì≠ –¢—ã —É–∂–µ –æ—Ç–≥–∞–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∑–∞–≥–∞–¥–∫—É! –ñ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é üïò")
        return

    puzzle = await get_puzzle_for_today()
    if not puzzle:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –∑–∞–≥–∞–¥–∫–∏ –Ω–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!")
        return

    answer = await clean_text(message.text)
    correct = await clean_text(puzzle["answer"])

    if answer == correct:
        # –ü–æ–¥—Å—á—ë—Ç –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤
        position = len(answered_users)
        points = max(1, 10 - position)
        user_coins[user_id] = user_coins.get(user_id, 0) + points
        answered_users.add(user_id)

        now = datetime.now()
        next_riddle_time = datetime.combine(now.date() + timedelta(days=1), datetime.strptime("09:00", "%H:%M").time())
        remaining = next_riddle_time - now
        hours, minutes = divmod(remaining.seconds // 60, 60)

        await message.answer(
            f"üéâ –ú–æ–ª–æ–¥–µ—Ü, —Ç—ã —É–≥–∞–¥–∞–ª! –¢—ã –ø–æ–ª—É—á–∏–ª {points} –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤.\n–°–ª–µ–¥—É—é—â–∞—è –∑–∞–≥–∞–¥–∫–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω. üß†")
    else:
        await message.answer("‚ùå –ù–µ—Ç, –Ω–æ —Ç—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

@router.callback_query(F.data == "rating")
async def show_rating(callback: CallbackQuery):
    top = sorted(user_coins.items(), key=lambda x: x[1], reverse=True)[:10]
    rating = "üèÜ –¢–æ–ø-10 –º–æ–∑–≥–æ–≤ –ù–ò–¢–ò:\n\n"
    for i, (uid, coins) in enumerate(top, 1):
        rating += f"{i}. <code>{uid}</code> ‚Äî {coins} –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤\n"
    await callback.message.edit_text(rating)

@router.callback_query(F.data == "admin_commands")
async def show_admin_commands(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫.")
        return

    await callback.message.edit_text(
        "‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "/addpuzzle ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–≥–∞–¥–∫—É\n"
        "/restart ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/stats ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
